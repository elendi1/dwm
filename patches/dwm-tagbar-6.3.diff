From aac2b9d96ae3b593b955046cb6b5c39effd0b2a9 Mon Sep 17 00:00:00 2001
From: elendi1 <2ti7xaoj@anonaddy.me>
Date: Thu, 17 Feb 2022 12:30:20 +0100
Subject: [PATCH] Tagbar patch: show unicode icon of the master client and use
 rectangles to count the number of client in a tag

---
 config.def.h |  7 +++++++
 dwm.c        | 44 +++++++++++++++++++++++++++++++++++++-------
 2 files changed, 44 insertions(+), 7 deletions(-)

diff --git a/config.def.h b/config.def.h
index a2ac963..14e55c9 100644
--- a/config.def.h
+++ b/config.def.h
@@ -31,6 +31,13 @@ static const Rule rules[] = {
 	{ "Firefox",  NULL,       NULL,       1 << 8,       0,           -1 },
 };
 
+static const ClassIcon classicons[] = {
+  {"St", ""},      // ST
+  {"firefox", ""}, // Firefox
+  {"Zathu", ""},   // Zathura
+  {"Thunde", ""},  // Thunderbird
+};
+
 /* layout(s) */
 static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
 static const int nmaster     = 1;    /* number of clients in master area */
diff --git a/dwm.c b/dwm.c
index a96f33c..162c052 100644
--- a/dwm.c
+++ b/dwm.c
@@ -141,6 +141,11 @@ typedef struct {
 	int monitor;
 } Rule;
 
+typedef struct {
+  char class[8];
+  char icon[8];
+} ClassIcon;
+
 /* function declarations */
 static void applyrules(Client *c);
 static int applysizehints(Client *c, int *x, int *y, int *w, int *h, int interact);
@@ -275,6 +280,8 @@ static Window root, wmcheckwin;
 /* compile-time check if all tags fit into an unsigned int bit array. */
 struct NumTags { char limitexceeded[LENGTH(tags) > 31 ? -1 : 1]; };
 
+unsigned int tagw[LENGTH(tags)];
+
 /* function implementations */
 void
 applyrules(Client *c)
@@ -433,7 +440,7 @@ buttonpress(XEvent *e)
 	if (ev->window == selmon->barwin) {
 		i = x = 0;
 		do
-			x += TEXTW(tags[i]);
+			x += tagw[i];
 		while (ev->x >= x && ++i < LENGTH(tags));
 		if (i < LENGTH(tags)) {
 			click = ClkTagBar;
@@ -701,6 +708,9 @@ drawbar(Monitor *m)
 	int boxw = drw->fonts->h / 6 + 2;
 	unsigned int i, occ = 0, urg = 0;
 	Client *c;
+  int j;
+  signed char tagclients[LENGTH(tags)];
+	char *tagmasterclient[LENGTH(tags)];
 
 	if (!m->showbar)
 		return;
@@ -712,20 +722,40 @@ drawbar(Monitor *m)
 		drw_text(drw, m->ww - tw, 0, tw, bh, 0, stext, 0);
 	}
 
+	for (i = 0; i < LENGTH(tags); i++) {
+		tagmasterclient[i] = (char *)tags[i];
+    tagclients[i] = 0;
+  }
+
 	for (c = m->clients; c; c = c->next) {
 		occ |= c->tags;
 		if (c->isurgent)
 			urg |= c->tags;
+		for (i = 0; i < LENGTH(tags); i++) {
+      if (c->tags & (1<<i)) { 
+        tagclients[i]++;
+			  if (tagmasterclient[i] == tags[i]) {
+			  	XClassHint ch = { NULL, NULL };
+			  	XGetClassHint(dpy, c->win, &ch);
+          for (j = 0; j < LENGTH(classicons); j++) {
+            if (strncmp(ch.res_class, classicons[j].class, strlen(classicons[j].class)) == 0) {
+              tagmasterclient[i] = (char *)classicons[j].icon;
+              break;
+            }
+          }
+			  }
+      }
+    }
 	}
 	x = 0;
 	for (i = 0; i < LENGTH(tags); i++) {
-		w = TEXTW(tags[i]);
+		tagw[i] = w = TEXTW(tagmasterclient[i]);
 		drw_setscheme(drw, scheme[m->tagset[m->seltags] & 1 << i ? SchemeSel : SchemeNorm]);
-		drw_text(drw, x, 0, w, bh, lrpad / 2, tags[i], urg & 1 << i);
-		if (occ & 1 << i)
-			drw_rect(drw, x + boxs, boxs, boxw, boxw,
-				m == selmon && selmon->sel && selmon->sel->tags & 1 << i,
-				urg & 1 << i);
+		drw_text(drw, x, 0, w, bh, lrpad / 2, tagmasterclient[i], urg & 1 << i);
+    for (j = 0; (j < tagclients[i]) && (j < 3); j++) {
+		  drw_rect(drw, x + boxs, boxs + (j % 3) * drw->fonts->h/3, boxw, boxw,
+                j < (tagclients[i] - 3),	urg & 1 << i);
+    }
 		x += w;
 	}
 	w = blw = TEXTW(m->ltsymbol);
-- 
2.35.1

